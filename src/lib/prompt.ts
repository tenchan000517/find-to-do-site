// src/lib/prompt.ts
import { fetchRelatedNews } from './trends';

/**
 * 記事生成用のプロンプトを作成（言語指定に関する制約を追加）
 */
export async function createArticlePrompt(topic: string, category: string): Promise<string> {
  // 関連ニュースを取得（最大3件に制限）
  const relatedNews = await fetchRelatedNews(topic, 3);
  
  // 関連ニュースの情報を文字列にまとめる（ソース情報付き）
  let newsContext = '';
  let sourceReferences = '';
  if (relatedNews.length > 0) {
    newsContext = `\n\n関連ニュース情報:\n` + relatedNews.map((news, index) => 
      `${index + 1}. 「${news.title}」(${new Date(news.pubDate).toLocaleDateString('ja-JP')}) - ${news.source}`
    ).join('\n');
    
    // ソース参照セクション用の情報
    sourceReferences = `\n\n参考情報源:\n` + relatedNews.map((news, index) => 
      `[${index + 1}] ${news.title} - ${news.source}${news.link ? `\n    URL: ${news.link}` : ''}`
    ).join('\n') + `\n[検索] Google News検索: ${relatedNews[0]?.searchUrl || 'https://news.google.com/'}`;
  }
  
  // カテゴリ別のプロンプト調整
  const categorySpecificInstructions = getCategorySpecificInstructions(category);
  
  // メインプロンプト（コードブロックの言語指定に関する厳格な制約を追加）
  const prompt = `
あなたは${category}の専門家として、「${topic}」について詳細で実践的なブログ記事を作成してください。読者にとって価値の高い、具体的で実用的な情報を提供することを重視してください。

${newsContext}

記事は以下の詳細な構成でマークダウン形式で書いてください：

## 記事構成
1. **タイトル** (# で始まる見出し) - SEO最適化されたインパクトのあるタイトル
2. **導入部** (300-400文字) - 読者の課題や関心を引き、主要キーワードを自然に含める
3. **背景・概要** (## 見出し、600-800文字) - トピックの重要性と現状、関連キーワード含有
4. **主要なポイント1** (## 見出し、800-1200文字) - 具体的な手法・アプローチ
5. **主要なポイント2** (## 見出し、800-1200文字) - 実践例・ケーススタディ
6. **主要なポイント3** (## 見出し、800-1200文字) - 応用・発展的な内容
7. **実践的なアドバイス** (## 見出し、600-800文字) - 読者への具体的な行動指針
8. **まとめ・次のステップ** (400-500文字) - 要点の振り返りと今後の展望
9. **参考文献・情報源** (## 見出し) - 記事作成に使用した情報源とURL

## 内容の質向上要件
- **具体例の豊富な提供**: 各セクションに実際の事例、数値、具体的な手順を含める
- **段階的な説明**: 初心者から上級者まで理解できるよう、基礎から応用まで段階的に解説
- **実践的な価値**: 読者がすぐに活用できる具体的なテクニック、ツール、方法論を提供
- **最新性の確保**: 2025年時点での最新トレンド、技術、市場動向を反映
- **専門性の向上**: 業界の専門用語を適切に使用し、深い洞察を提供

${categorySpecificInstructions}

## 記事作成の詳細指示
- **文字数**: 5000〜7000文字を目標とし、各セクションに十分な内容を含める
- **マークダウン記法**: 見出し、リスト、強調、リンクを効果的に活用
- **読みやすさ**: 段落間の適切な改行、箇条書きの活用で読みやすさを向上
- **SEO対策**: 自然にキーワードを組み込み、検索エンジンに評価されやすい構成
- **エンゲージメント**: 読者の興味を引く問いかけや、行動を促す表現を含める

## SEO最適化要件 (重要)
- **タイトル最適化**: 主要キーワードをタイトルの前半に配置、60文字以内
- **見出し構造**: H2、H3タグを適切に使用し、キーワードを含める
- **キーワード密度**: 主要キーワードを自然に2-3%の密度で配置
- **関連キーワード**: LSI（潜在的意味インデックス）キーワードを適切に含める
- **内部リンク**: 関連する概念について適切な箇所で内部リンクを示唆
- **画像ALT**: コードブロックや図表の説明を具体的に記述
- **メタ情報**: 記事の専門性、権威性、信頼性（E-A-T）を強調する表現を含める

## コードブロックに関する重要な制約
- コードブロックでは必ず以下の言語指定子のみを使用: tsx, ts, js, jsx, javascript, typescript, json, html, css
- その他の言語が必要な場合でも、これらの言語指定子のどれかを使用
- 特に vue, tsxx などの拡張子は使用禁止
- 言語指定子がわからない場合は tsx を使用
- コードブロック形式: \`\`\`tsx コード例 \`\`\`

## 必須要件
- タイトルは必ず # で始まる形式で最初に記述
- 各セクションに具体的な数値、事例、手順を含める
- 読者が実際に行動に移せる具体的なアドバイスを提供
- 専門性と実用性のバランスを保つ
- 記事の最後に必ず「参考文献・情報源」セクションを含める

## 参考文献・情報源セクション（必須）
記事の最後に以下の形式で参考文献セクションを作成してください：

## 参考文献・情報源

本記事は以下の信頼できる情報源を参考に作成されました：

${sourceReferences}

**関連情報:**
- 最新の業界動向については、各公式サイトをご確認ください
- 技術的な詳細は、公式ドキュメントを参照することをお勧めします

**免責事項:**
本記事の情報は執筆時点でのものであり、最新の情報については各公式サイトをご確認ください。
`;

  return prompt;
}

/**
 * カテゴリ別の特別な指示を取得
 */
function getCategorySpecificInstructions(category: string): string {
  const instructions: Record<string, string> = {
    'プログラミング': `
## プログラミング特化の追加要件
- **実装詳細**: 完全動作するコードサンプルを複数パターン提供（初級・中級・上級レベル）
- **言語指定**: tsx, ts, js, jsx, javascript, typescript, json, html, css のいずれかを使用
- **アーキテクチャ解説**: 設計パターン、ベストプラクティス、アンチパターンの具体例
- **パフォーマンス**: 実行速度、メモリ使用量、スケーラビリティの観点から分析
- **最新技術**: 2025年の最新ライブラリ、フレームワーク、言語機能を詳細解説
- **実践演習**: 読者が実際に試せるハンズオン形式の課題を含める`,

    'ウェブ開発': `
## ウェブ開発特化の追加要件
- **フルスタック視点**: フロントエンド、バックエンド、インフラの包括的解説
- **言語指定**: tsx, ts, js, jsx, javascript, typescript, json, html, css のいずれかを使用
- **レスポンシブ設計**: モバイル、タブレット、デスクトップ対応の具体的実装例
- **パフォーマンス最適化**: Core Web Vitals、読み込み速度、UX改善の具体的手法
- **セキュリティ**: HTTPS、CSP、XSS対策などの実装詳細
- **アクセシビリティ**: WCAG準拠の具体的実装とテスト方法`,

    'AI技術': `
## AI技術特化の追加要件
- **技術深掘り**: アルゴリズム、モデル構造、学習プロセスの詳細解説
- **言語指定**: tsx, ts, js, jsx, javascript, typescript, json のいずれかを使用
- **実装例**: Gemini API、OpenAI API等の具体的な統合コード
- **ユースケース**: 業界別・用途別の具体的活用事例（10パターン以上）
- **効果測定**: ROI、精度、効率化効果の定量的評価手法
- **倫理・法的観点**: AI利用における責任、プライバシー、規制対応の解説`,

    'キャリア': `
## キャリア特化の追加要件
- **成功事例詳細**: 具体的な転職・昇進事例（年収、ポジション、スキル変遷）
- **スキルマップ**: 職種別・レベル別の必要スキルと習得ロードマップ
- **市場分析**: 求人動向、給与相場、将来性の定量的データ
- **面接対策**: 技術面接、行動面接の具体的質問例と回答戦略
- **ネットワーキング**: 業界人脈構築の具体的手法とイベント活用法
- **継続学習**: 最新技術キャッチアップの効率的な方法論`,

    'ビジネス': `
## ビジネス特化の追加要件
- **事例分析**: 成功・失敗事例の詳細分析（数値、戦略、結果の因果関係）
- **データドリブン**: KPI、ROI、成長率等の具体的数値とその解釈
- **戦略フレームワーク**: SWOT、5Forces、バリューチェーン等の実践的活用法
- **市場動向**: 業界トレンド、競合分析、機会・脅威の詳細評価
- **実行計画**: 戦略を実際のアクションに落とし込む具体的ステップ
- **リスク管理**: 想定リスクと対策、コンティンジェンシープランの策定法`,
  };
  
  return instructions[category] || instructions['プログラミング'];
}